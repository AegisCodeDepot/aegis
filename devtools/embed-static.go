//go:build ignore

package main

// turns a directory into a single .go file.
// usage: go run embed-static.go {staticDir} {templateDirName}

import (
	"fmt"
	"log"
	"os"
	"path"
	"strings"
)

func isTemporaryFile(f string) bool {
	if strings.HasPrefix(f, ".#") { return true }
	if strings.HasPrefix(f, "~") { return true }
	if strings.HasSuffix(f, "~") { return true }
	if strings.HasPrefix(f, "#") && strings.HasSuffix(f, "#") { return true }
	return false
}

func recursivelyCollectFiles(m map[string]string, sourceBase string, prefix string) error {
	ls, err := os.ReadDir(sourceBase)
	if err != nil { return err }
	for _, item := range ls {
		if !item.IsDir() && isTemporaryFile(item.Name()) { continue }
		
		sourcePath := path.Join(sourceBase, item.Name())
		targetPath := fmt.Sprintf("%s%s", prefix, item.Name())
		if item.IsDir() {
			err = recursivelyCollectFiles(m, sourcePath, targetPath+"/")
			if err != nil { return err }
		} else {
			f, err := os.ReadFile(sourcePath)
			if err != nil { return err }
			m[targetPath] = string(f)
		}
	}
	return nil
}

func main() {
	staticDir := os.Args[1]
	m := make(map[string]string, 0)
	err := recursivelyCollectFiles(m, staticDir, "")
	if err != nil { log.Panicln(err) }
	templateDirName := os.Args[2]
	resFilePath := path.Join(templateDirName, "static.go")
	f, err := os.OpenFile(
		resFilePath,
		os.O_CREATE|os.O_WRONLY|os.O_TRUNC,
		0644,
	)
	if err != nil { log.Panic(err) }
	defer f.Close()
	_, err = f.WriteString(`// generated by devtools/embed-static.go. DO NOT EDIT

package ` + templateDirName + `

import (
	"os"
	"path"
)

var StaticFileMap map[string]string = map[string]string{
`)
	if err != nil { log.Panic(err) }
	for k, v := range m {
		_, err = f.WriteString(fmt.Sprintf(`    "%s": ` + "`", k))
		if err != nil { log.Panic(err) }
		_, err = f.WriteString(v)
		if err != nil { log.Panic(err) }
		_, err = f.WriteString("\n`,\n")
		if err != nil { log.Panic(err) }
	}
	_, err = f.WriteString("}\n\n")
	f.WriteString(`

func UnpackStaticFileTo(p string) error {
	for k, v := range StaticFileMap {
		targetP := path.Join(p, k)
		dirP := path.Dir(targetP)
		err := os.MkdirAll(dirP, 0744|os.ModeDir)
		if err != nil { return err }
		f, err := os.OpenFile(
			targetP,
			os.O_CREATE|os.O_WRONLY|os.O_TRUNC,
			0644,
		)
		if err != nil { return err }
		defer f.Close()
		_, err = f.WriteString(v)
		if err != nil { return err }
	}
	return nil
}
`)
	if err != nil { log.Panic(err) }
	
}

